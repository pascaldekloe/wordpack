// Code generated by packgen(1); DO NOT EDIT.

package {{ .PackageName }}

import "math/bits"

// Integer defines the supported data types.
type Integer interface {
	~int | ~int16 | ~int32 | ~int64 | ~uint64
}

// Word is the processing size for bit-packing.
type Word uint{{ .WordWidth }}
{{- $signedWord := print "int" .WordWidth }}

// AppendDeltaEncode adds the difference of each consecutive value in src,
// encoded to dst, and it returns the extended buffer. The first value in src
// gets compared against offset. Src[0] makes a good offset when first in line.
// The number of Words added to dst ranges from 0 to {{ .WordWidth }}.
func AppendDeltaEncode[T Integer](dst []Word, src *[{{ .WordWidth }}]T, offset T) []Word {
	// collect bits in use by all deltas (zig-zag encoded) combined
	d0 := int{{ .WordWidth }}(offset - src[0])
{{- $signShift := .WordWidthMinusOne }}
	mask := (d0 << 1) ^ (d0 >> {{ $signShift }})
{{ range $index, $value := iterate .WordWidthMinusOne }}	d{{ $value }} := {{ $signedWord }}(src[{{ $index }}] - src[{{ $value }}])
	mask |= d{{ $value }}<<1 ^ d{{ $value }}>>{{ $signShift }}
{{ end }}
	switch bits.Len64(uint64(mask)) {
	case 0:
		return dst // nop
{{ range .BitPacks }}	case {{ .BitN }}:
		return append{{ .BitN }}BitDeltaEncode(dst, src, offset)
{{ end }}	default:
		return append(dst{{ range $index, $number := iterate .WordWidth }}, Word(src[{{ $index }}]){{ end }})
	}
}

// AppendDeltaEncode adds {{ .WordWidth }} Integers to dst and it returns the extended buffer.
// The appended Integers are equal to an AppendDeltaEncode's input if src equals
// the appended Words from the encode, and if both offset values are equal too.
func AppendDeltaDecode[T Integer](dst []T, src []Word, offset T) []T {
	switch len(src) {
	case 0:
		return append(dst{{ range iterate .WordWidth }}, offset{{ end }})
{{ range .BitPacks }}	case {{ .BitN }}:
		return append{{ .BitN }}BitDeltaDecode(dst, (*[{{ .BitN }}]Word)(src), offset)
{{ end }}	default:
		return append(dst{{ range $index, $number := iterate .WordWidth }}, T(src[{{ $index }}]){{ end }})
	}
}{{ range .BitPacks }}

func append{{ .BitN }}BitDeltaEncode[T Integer](dst []Word, src *[{{ .WordWidth }}]T, offset T) []Word {
	return append(dst,
{{ range .BitPackExpressions .DeltaEncodeExpressions }}		{{ . }},
{{ end }}	)
}{{ end }}{{ range .BitPacks }}

func append{{ .BitN }}BitDeltaDecode[T Integer](dst []T, src *[{{ .BitN }}]Word, offset T) []T {
{{ range $index, $expr := .BitUnpackExpressions }}	offset -= T({{ $signedWord }}({{ $expr }})>>1 ^ -({{ $signedWord }}({{ $expr }}) & 1))
	out{{ $index }} := offset
{{ end}}
	return append(dst{{ range $index, $expr := .BitUnpackExpressions }}, out{{ $index }}{{ end }})
}{{ end }}
