// Code generated by packgen(1); DO NOT EDIT.

package {{ .PackageName }}

import "math/bits"

// Word is the processing size for bit-packing calculations.
type Word uint{{ .WordWidth }}

// AppendDeltaEncode adds the difference of each consecutive value in src to
// dst. The first value in src is compared against offset. Use src[0] as offset
// when first in line.
func AppendDeltaEncode[T ~int | ~int32 | ~int64 | ~uint64](dst []Word, src *[{{ .WordWidth }}]T, offset T) []Word {
	// collect bits in use by all deltas (zig-zag encoded) combined
	d0 := int64(offset - src[0])
	mask := (d0 << 1) ^ (d0 >> 63)
{{ range $index, $value := iterate 63}}	d{{ $value }} := int64(src[{{ $index }}] - src[{{ $value }}])
	mask |= (d{{ $value }} << 1) ^ (d{{ $value }} >> 63)
{{ end }}
	switch bits.Len64(uint64(mask)) {
	case 0:
		return dst // nop
{{ range .BitPacks }}	case {{ .BitN }}:
		return append{{ .BitN }}BitDeltaEncode(dst, src, offset)
{{ end }}	default:
		return append(dst{{ range $index, $number := iterate .WordWidth }}, Word(src[{{ $index }}]){{ end }})
	}
}

// AppendDeltaDecode restores the input from an AppendDeltaEncode. The offsets
// must match.
func AppendDeltaDecode[T ~int | ~int32 | ~int64 | ~uint64](dst []T, src []Word, offset T) []T {
	switch len(src) {
	case 0:
		return append(dst{{ range iterate .WordWidth }}, offset{{ end }})
{{ range .BitPacks }}	case {{ .BitN }}:
		return append{{ .BitN }}BitDeltaDecode(dst, (*[{{ .BitN }}]Word)(src), offset)
{{ end }}	default:
		return append(dst{{ range $index, $number := iterate .WordWidth }}, T(src[{{ $index }}]){{ end }})
	}
}{{ range .BitPacks }}

func append{{ .BitN }}BitDeltaEncode[T ~int | ~int32 | ~int64 | ~uint64](dst []Word, src *[{{ .WordWidth }}]T, offset T) []Word {
	return append(dst,
{{ range .BitPackExpressions .DeltaEncodeExpressions }}		{{ . }},
{{ end }}	)
}{{ end }}{{ range .BitPacks }}

func append{{ .BitN }}BitDeltaDecode[T ~int | ~int32 | ~int64 | ~uint64](dst []T, src *[{{ .BitN }}]Word, offset T) []T {
{{ range $index, $expr := .BitUnpackExpressions }}	offset -= T((int64({{ $expr }}) >> 1) ^ (-(int64({{ $expr }}) & 1)))
	out{{ $index }} := offset
{{ end}}
	return append(dst{{ range $index, $expr := .BitUnpackExpressions }}, out{{ $index }}{{ end }})
}{{ end }}
